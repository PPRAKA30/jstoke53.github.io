---
layout: default
title: Electrical Design Motivations
---

Design Details and Consideration
--------------------------------

Both the production board and development board must have:

* Microcontroller with enough horsepower to process and send all CAN messages
  and 2 CAN controllers
* USB 2.0 port (controller included in microcontroller)
* 2x CAN transceivers
* 2x 12-pin headers for CAN
* UART with optional Bluetooth module

The development board must:

* Be programmable over USB with no extra hardware (we don't care so much if the
  production board is easily programmable by end users, since they will be so
  cheap as to just warrant replacement when a new version rolls around)
* Have a JTAG header for debugging
* Include extra GPIO for other testing
* Power via USB

The production board must have:

* Self-test function to validate boards that are mass produced
* 6-pin ISP header
* Powered by the vehicle via the OBD-II port

[Power](/electrical/power.html)

### MCU Selection

The VI was originally built around a ChipKit MAX32 development
board, which used a PIC32MX795F512 processor.  We chose to move away from this
architecture due to frustrations around the open-source support and tools of the
PIC32 line.  We had trouble developing for this platform in Linux, and had to
resort to closed-source windows tools in order to use the device effectively.
Most other MCUs in the same performance category as the PIC32 device lie in the
[ARM-Cortex-M family](http://en.wikipedia.org/wiki/ARM_Cortex-M), particularly
the ARM Cortex-M3 core.  Several major MCU manufacturers make Cortex-M3 devices
(Atmel, NXP, STMicro, TI),  The NXP LPC17XX line was selected due to it's
excellent open-source compiler support, library support, and ease of
programming.  Many off-the-shelf open-source hardware designs exist for the
LPC1768, and this encourages a large amount of community support and a wider
variety of user-contributed libraries.

The MCU system design was based around the [Blueboard
LPC1768-H](http://shop.ngxtechnologies.com/product_info.php?products_id=65).
This was done to allow firmware to be prototyped on an off-the-shelf open-source
hardware.  The hardware configuration is also compatible with the [MBED rapid
prototyping board/environment](http://mbed.org/).  The Clock, Power and USB
subsystems are all equivalent.  The JTAG interface was converted to the 10-pin
ARM JTAG Mini format to reduce the PCB footprint of the normal large 20-pin JTAG
connector.  This results in a 12MHz external crystal oscillator stepped up to a
100MHz system clock.

### LPC1769 Data

* [LPC1769FB100 Product Page](http://www.nxp.com/products/microcontrollers/cortex_m3/LPC1769FBD100.html)
* [LPC176X Datasheet](http://www.nxp.com/documents/data_sheet/LPC1769_68_67_66_65_64_63.pdf)
* [LPC17XX User Manual](http://www.nxp.com/documents/user_manual/UM10360.pdf)
* [Blueboard LPC1768-H Product Page](http://shop.ngxtechnologies.com/product_info.php?products_id=65)
* [Blueboard LPC1768-H Schematics V2](http://shop.ngxtechnologies.com/download/Schematics/BlueBoard/BB_LPC1768_H/Blueboard_lpc1768_H_V2.pdf)
* [mbed LPC1768 schematics](http://mbed.org/media/uploads/chris/mbed-005.1.pdf)

### CAN Interface

The CAN interface is acheived using an [NXP
TJA1048](http://www.nxp.com/documents/data_sheet/TJA1048.pdf), a dual-channel
CAN transceiver.  This is a part recommended by Ford engineers for it's
reliablity and robustness.  The only hard requirement of this transceiver is
that it have a Standby mode, and some way to wake up the microcontroller when
the CAN bus comes out of standby.  Aside from the CAN signals, the TJA1048 also
has one standby input per channel - pulling each line low will put it's
respective CAN channel into standby mode.  These are routed to P0.19 for CAN
Channel 1, and P0.6 for CAN Channel 2.

On the automotive side of the CAN transceivers, some support electronics are
required.  D4 and D5 provide additional ESD protection against voltage spikes on
the CAN line - each
[PESD1CAN](http://www.nxp.com/documents/data_sheet/PESD1CAN.pdf) can provide up
to 200W of peak dissipation and ESD protection up to 23kV.  R1 and R2 provide
termination resistance for the CAN Bus.  If the VI is acting as a
CAN Slave, and is reading CAN signals from a vehicle, these resistors need to be
connected across the HI and LO wires of each CAN bus.  SJ1 and SJ2 are closed by
default, enabling this termination.  If this termination is not needed, the
solder jumpers can be cut.  Finally, each CAN signal as a 100pF bypass capacitor
very close to the OBD connector, to shunt high frequency noise to ground.

The CAN bus doesn't particularly require a high speed PCB design, since the rate
is only 1Mbps at most.  However an attempt was made to maintain the
characteristic 120 ohm differential impedance on the CAN lines.  An attempt was
also made to maintain a 45 mil guard band around each CAN bus, to keep high
frequency switching transients from coupling onto the CAN bus.  The guard band
was also applied to the LPC1769 side of the CAN transciever, to keep the same
transients out of the converted CAN signals.  Since the layout is only 2 layers
and very crowded, this wasn't implemented perfectly, but seems to be within 85%
coverage.  The combination of these considerations means that the CAN interface
should be highly resilient to noise and should limit signal distortion due to
reflections and other transmission line phenomenon.

CAN transceivers:

* NXP TJA1040 (or other NXP model, but this is supposedly best for being able to
  suspend) (Ford approved)
* MCP2551 - Single CAN transceiver (not Ford approved, need 2)
* NXP TJA1048T - Dual-CAN transceiver (Ford approved)
  * about 10 cents more expensive than 2 single CAN transceivers

### Bluetooth Interface

The [Roving Networks RN-41](http://www.rovingnetworks.com/products/RN41) was
chosen to implement the Bluetooth interface for the VI:

* a low-cost and easy-to-use option
* easily prototyped
* automatically implents the Serial Port Profile (SPP) configuration
* no need to implement a Host/Controller Interface (HCI), keeps MCU code simple

The only major design impact of the RN-41 is that it requires a large "keepout"
area near the antenna of the module.  In this area, there should be a minimal
amount of traces or copper blocking the radio signal.  The [RN-41
Datasheet](http://www.rovingnetworks.com/resources/download/18/RN_41)
illustrates the suggested keepout zone on page 9.  Otherwise, the RN-41 is
controlled with a serial UART bus with similar bitrates to the CAN data (230kbps
- 1Mbps).  In our testing we discovered that hardware flow control is necessary
to fully saturate the bluetooth link.  The firmware on the RN-41 does not
respond well to buffer overruns - if data is written to the RN-41 faster than it
can be sent over the bluetooth link, the module will eventually overflow and
reset without warning.  Adding the RTS and CTS lines to UART1 on the LPC1769
fixed this problem - the RN-41 will inform the MCU host when it's buffer is
full.

The tradeoff of a simplified Bluetooth module is that the implementation details
of the SPP profile limit the throughput of the bluetooth link.  While the
underlying Enhanced Data Rate (EDR) bluetooth link can technically operate at
3Mbps, the asynchronous nature of SPP limits the RN-41 to 240kbps in slave mode.
In our testing, the RN-41 only hit this speed for brief peak bursts.  The
sustained average speed was 202kbps.  Future designs may consider using a more
complicated bluetooth chipset with an HCI interface implemented on the MCU for
greater throughput.  An example of a test run:

<img src="./Testing%20Results/BT_Endurance_Histogram_012613.svg" alt="RN-41 Test Throughput" width="1024">
<!--![RN-41 Test Throughput](./Testing%20Results/BT_Endurance_Histogram_012613.svg "RN-41 Test Throughput")-->

* Average rate: 25.282 KB/s
* Maximum speed: 30.185 KB/s
* Minimum speed: 14.718 KB/s

### USB Interface

USB is provided directly by the LPC1769 - no external transceiver or controller
is necessary.  A few external components are required to correctly enable the
LPC1769 as a USB Device and can be found on [Page 276 of the LPC1769
manual](http://www.rovingnetworks.com/resources/download/47/Advanced_User_Manual).
The USB_CONNECT line and associated circuitry was mirrored from the LPC1768-H
Blueboard design so that USB bootloader firmware would be interoperable, and a
few modifications were made for additional resilience and device compatibility:

Diodes D2, D6 and D7 were added to ESD protect the USB lines.  D2 is an [NXP
PESD12VS1ULD](http://www.nxp.com/documents/data_sheet/PESD12VS1ULD.pdf)
unidirectional ESD protection diode.  D6 and D7 are [NXP
PESD5V0X1BL](http://www.nxp.com/documents/data_sheet/PESD5V0X1BL.pdf)
bidirectional ESD diodes.  All protection diodes are specifically designed for
the USB bus and have very low capacitance to avoid disrupting USB signals.

Resistor R25 attempts to indicate to an attached USB OTG device that the CAN
Translator can provide charging current.  A specification exists on [Page 48 of
the USB Battery Charging Specification
R1.2](http://kinetis.pl/sites/default/files/BC1.2_FINAL.pdf) describing an
Accessory Charger Adapter.  This specification defines special resistance values
on pin 4 of a USB OTG connector that should flag that the connected device is a
charging device.  However in practice very few devices actually honor this
specification.  It's totally up to the implementation of the portable tablet or
smartphone whether or not they support charging while using the USB port as a
USB Host.

If a Male-Male USB Micro cable is used with the VI, this
identification resistor will be readable by a connected USB OTG device.  If the
device is USB ACA compliant, it will successfully charge.  If a Male-Male cable
is unavailable, or if the device doesn't honor the USB ACA specification, a
normal USB A to USB Micro cable can be used with a commonly-available USB OTG
Host mode adapter.  For example:

* A Samsung Galaxy Note II with stock android firmware will honor the USB ACA
  profile [(from this forum post)](http://www.head-fi.org/t/595071/android-phones-and-usb-dacs/405#post_8748466)
* A Motorola Droid Razr with stock firmware and a normal USB OTG Host cable will
  charge (tested)
* A Google Nexus 7 tablet will not charge from the USB OTG port when host mode
  is enabled without a custom firmware (tested)

USB signals require high speed PCB routing to avoid signal integrity issues,
since the bitrates are high (11Mbps - 480Mbps).  Unfortunately with a 2 layer
PCB, the trace widths required to obtain the ideal 90 ohm differential impedance
for a USB line would be unfeasibly wide.  To compensate for this fact, the USB
connector was located extremely close (~300 mils) to the LPC1769 USB pins.  A
guard band was used around the USB lines and tightly coupled to the ground
plane.  The ground plane underneath the USB signals was kept clear so the ground
loop would be kept small and transient ground currents would avoid coupling into
the USB signal.

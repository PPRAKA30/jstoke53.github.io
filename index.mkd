---
layout: default
title: OpenXC Vehicle Interface Reference Design
---

<div class="page-header">
    <h1>{{page.title}}</h1>
</div>

![Vehicle Interface](/static//images/scaled.jpg "The Vehicle Interface")

<h2>What is OpenXC?</h2>

<a href="http://openxcplatform.com">OpenXC</a> is an API to your car - by
installing a small hardware module to read and translate metrics from a
car's internal network, the data becomes accessible from most Android
applications using the OpenXC library. You can start making vehicle-aware
applications that have better interfaces based on context, can minimize
distraction while driving, are integrated with other connected services, and
can offer you more insight into your car's operation.

<h2>What is this vehicle interface?</h2>

The [Vehicle Interface](http://openxcplatform.com/vehicle-interface/index.html)
(VI or CAN translator) is piece of hardware that connects to the car's CAN bus,
translates proprietary CAN messages to the standard [OpenXC message
format][output-format] and sends the output over USB, Bluetooth or Ethernet/WiFi
to a [host device][].

The particular unit is a reference design for a "dongle" style vehicle interface
that connects directly to the diagnostic port with no cable. Ford created this
design as an iteration from the original, [chipKIT-based vehicle
interface](http://chipkit-vi.openxcplatform.com) with the goal to:

* Require no OBD-II cable to connect to the vehicle
* Be compact enough to sit directly on the OBD-II port and not hit the driver's
  knees.
* Include Bluetooth by default
* Be powered from the vehicle and not drain the battery when left attached
* Provide 12v power from the vehicle to an external USB hub for other OpenXC
  hardware modules

This streamlined vehicle interface uses the ARM Cortex-M3 processor (the NXP
LPC1769), CAN transceivers from NXP, a micro-USB port and the RN-41 Bluetooth
module from Roving Networks. The design includes a 12v port (with a Molex
connector) to power an external device from the car, and this port can be shut
off with the car to avoid battery drain.

We also designed and prototyped a plastic housing for the board that allows it
to be easily gripped and attached/detached from the OBD-II port underneath the
steering wheel.

The current BOM total cost in 1,000 unit quantities is around $45.

### Features

* Reads from 2 different CAN buses (Diagnostic Fast and Diagnostic Med) at up
  to 1Mbps per bus.
* Decodes CAN data into a human and machine-readable format (currently JSON)
* Can relay vehicle data at up to 250kbps over a Bluetooth connection
* Can relay vehicle data at up to 11Mbps over a USB connection
* Passes up to 6A of power from the vehicle to the Dock and Accessories

### Cost Optimization Options

These are some thoughts on how to minimize the cost of the VI.

**Remove Bluetooth**

Cost Savings: ~$25 (1000 unit quantity) by removing the module, associated
components on board and the slight size decrease that would be possible.

Negatives: No wireless support, USB only.

**Use a different MCU in the same family**

Cost Savings: ~$2 (1000 unit quantity) by going with the LPC1754 (half the price
of the LPC1769)

Negatives: Only 1 CAN controller

**Use a different MCU from another family**

Cost Savings: ?

NXP's Cortex-0 family doesn't have CAN controllers. The PIC32 family is
generally more expensive than the LPC1769. Any other options?

**Remove 12v power port**

**Remove 1 RGB LED**

Cost savings: $1

**Remove 1 button**

Cost savings: ~$0.35

### Known issues:

For greater detail, see CHANGELOG.xls

#### v0.3:

* The very first run of prototypes are lacking epoxy on the USB Micro connector
  and the connector may break under stress.  This will be fixed in subsequent
  manufacturing runs.

#### v0.2:

* Output Power Jack Polarity is incorrect - The output power jack should be
  configured such that Pin 1 (the keyed pin) is Ground, and Pin 2 is +12V. This
  is flipped on the R0.2 PCB. A custom cable was created to patch this issue,
  and is labeled `R0.2 Only`. Only use this cable with R0.2 prototypes,
  otherwise the KBoard TVS Diode D2 and/or the VI power switch IC7
  may be damaged or destroyed.
* JTAG CLK line - the JTAG signal RTCK was disconnected on R0.2 boards. It has
  manually been replaced with a wire. Occasionally the additional capacitance of
  this wire can cause JTAG errors - try reducing the JTAG clock rate.
* JTAG Ground noise - Occasionally JTAG errors can be caused by a ground loop
  between a USB JTAG adapter and the MicroUSB port on the VI. Try
  removing one or more connections to ground: IE, try powering the prototype
  from ONLY +5V USB verses the +12V OBD-II supply.
* Bluetooth connection dropout - Under some circumstances, the RN-41 bluetooth
  chipset will lock up and drop an active bluetooth connetion when under heavy
  load:
    * The most common cause of this problem is software flow control: make sure
      to use the RTS and CTS pins for UART1.
    * The RN-41 configuration timer can also cause the RN-41 input buffer to
      fill. From the LPC1769, enter configuration mode by transmitting
      ```$$$```, disable the configuration timer with ```ST,0\r\n``` and then
      exit configuration mode by entering ```---\r\n```. Finally, power cycle
      the VI. The test firmware `rn42-passthrough` enables serial
      data to be relayed between UART0 (the 6-pin ISP header) and UART1 (the
      bluetooth interface).

[output-format]: http://openxcplatform.com/vehicle-interface/output-format.html
[host device]: http://openxcplatform.com/android/index.html
